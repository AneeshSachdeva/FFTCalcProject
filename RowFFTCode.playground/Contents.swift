
import XCPlayground
import Accelerate


// The original (w/ noice) acceleration data recorded from the boat. Recorded by mobile phone, values are Y-Axis acceleration.
let rowAccelerationData = [-0.001320826,-0.001320826,-0.001320826,-0.001318747,-0.001318747,0.01306768,0.01306768,0.01306768,-0.002336901,-0.002336901,-0.002336901,0.01983123,0.01983123,0.01983123,-0.001091763,0.005080348,0.004511109,0.004511109,-0.004078191,-0.004078191,0.003274323,0.003274323,0.003274323,0.00418888,0.00418888,0.00418888,0.001183262,0.001183262,0.001183262,0.01843499,0.01843499,0.01843499,-0.0302536,-0.0302536,-0.0302536,-0.03731535,-0.03731535,-0.03230336,-0.03230336,-0.03230336,-0.1182105,-0.1182105,-0.1182105,-0.003253959,-0.003253959,-0.003253959,0.01973017,0.01973017,-0.0841738,-0.0841738,-0.0841738,-0.1258114,-0.1258114,-0.1258114,0.01252221,0.01252221,0.3635019,0.3635019,0.3635019,0.5222974,0.5222974,0.5222974,0.6572469,0.6572469,0.6572469,0.3768183,0.3768183,0.3768183,0.1093957,0.1093957,0.1093957,-0.04252765,-0.04252765,-0.04252765,-0.2331498,-0.2331498,-0.2331498,-0.519573,-0.519573,-0.519573,-0.8321637,-0.8321637,-0.8321637,-0.8665879,-0.8665879,-0.8665879,-0.7159812,-0.7159812,-0.7159812,-0.365991,-0.365991,-0.365991,-0.3251477,-0.3251477,-0.3251477,-0.09213331,-0.09213331,-0.09213331,0.1701224,0.1701224,0.1466914,0.1466914,0.2721953,0.2721953,0.2721953,0.3201326,0.3201326,0.3201326,0.754314,0.754314,0.754314,1.038348,1.038348,1.038348,1.146079,1.146079,1.146079,0.3937651,0.3937651,0.3937651,0.3497173,0.3497173,0.3497173,0.1514885,0.1514885,0.01117504,0.01117504,-0.3642558,-0.3642558,-0.3642558,-0.2300367,-0.2300367,-0.4758556,-0.4758556,-0.7089897,-0.7089897,-0.2473193,-0.2473193,-0.2473193,-0.8934462,-0.8934462,-0.8934462,-0.6345435,-0.6345435,-0.6345435,-0.7064629,-0.7064629,-0.7064629,-0.4702642,-0.4702642,-0.4702642,-0.1922004,-0.1922004,-0.1658376,-0.1658376,-0.2551424,-0.2551424,-0.1065849,-0.1065849,-0.1065849,0.07654124,0.07654124,0.07654124,0.2634093,0.2634093,0.7476317,0.7476317,0.7476317,1.332044,1.332044,1.332044,1.414584,1.414584,1.414584,1.075616,0.9380161,0.9380161,0.4757625,0.4757625,0.355179,0.355179,0.355179,0.3561903,0.3561903,-0.4413965,-0.4413965,-0.4413965,-0.7659197,-0.7659197,-0.6161251,-1.38185,-1.38185,-1.38185,-0.6506933,-0.6506933,-1.301119,-1.301119,-1.301119,-0.6640258,-0.6640258,-0.6558268,-0.6558268,-0.3300265,-0.3300265,-0.3300265,-0.2192911,-0.2192911,-0.2192911,-0.2938293,-0.2938293,-0.2938293,0.07368788,0.07368788,0.07368788,0.3599182,0.3599182,0.3599182,0.874691,0.874691,0.874691,1.020204,1.020204,1.020204,0.7358646,0.7358646,0.7358646,0.2115559,0.2115559,0.2115559,-0.03200471,-0.03200471,-0.03200471,-0.01174138,-0.01174138,-0.01174138,-0.1332963,-0.1332963,-0.1332963,-0.1152611,-0.1152611,-0.1582579,-0.1582579,-0.1582579,-0.08972392,-0.08972392,-0.05885591,-0.05885591,-0.05885591,-0.09342544,-0.09342544,-0.09342544,-0.04887116,-0.04887116,-0.04887116,-0.04363115,-0.04363115,-0.04363115,0.003765441,0.003765441,0.003765441,-0.02244861,-0.02244861,-0.02244861,-0.0004810169,-0.0004810169,0.01283576,0.01283576,0.01283576,0.01841571,0.01841571,0.01841571,0.02345443,0.02345443,0.02345443,0.01495362,0.01495362,0.03552461,0.01261675,0.01261675,0.01261675,0.02081409,0.02081409,0.02081409,0.02331259,0.01132817,0.01132817,0.01132817,0.01132817,0.007413752,-0.00476629,-0.00476629,-0.00476629,0.01131146,0.001374917,0.001374917,0.001374917,0.01357596,0.01357596,0.01357596,0.01322685,0.01322685,0.01322685,0.0211216,0.0211216,0.0211216,0.004228318,0.004228318,0.004228318,0.01040528,0.01040528,0.01040528,-0.002787479,-0.002787479,-0.002787479,0.003355039,0.003355039,0.003355039,0.01544034,0.01544034,0.009106237,0.009106237,0.002060298,0.002060298,0.002060298,0.02155743,0.02155743,0.02155743,-0.004954175,-0.004954175,-0.004954175,0.002449817,0.0164529,0.0164529,-0.01161113,-0.01161113,-0.01161113,0.0001670355,0.0001670355,0.0001670355,0.01548648,0.01548648,0.01548648,0.01548648,0.01047176]

/*-----------------------------------------------------Core Functions----------------------------------------------------*/

/**Plots given array in playground.*/
func plotArrayInPlayground<T>(arrayToPlot:Array<T>, title:String) {
    for currentValue in arrayToPlot {
        XCPCaptureValue(title, currentValue)
    }
}

/**Takes and returns the square root.*/
func sqrt(x: [Double]) -> [Double] {
    var results = [Double](count:x.count, repeatedValue:0.0)
    vvsqrt(&results, x, [Int32(x.count)])
    return results
}

/**Adds two vectors, powered by Apple's Accelerate framework.*/
infix operator  +++ {}
func +++ (a: [Double], b: [Double]) -> [Double] {
    assert(a.count == b.count, "Expected arrays of the same length, instead got arrays of two different lengths")
    
    var result = [Double](count:a.count, repeatedValue:0.0)
    vDSP_vaddD(a, 1, b, 1, &result, 1, UInt(a.count))
    return result
}

// Must declare the size of the array that will be FFT'ed
let sineArraySize = 344

// Setting up for the FFT. These are the weights. Required by Apple
let fft_weights: FFTSetupD = vDSP_create_fftsetupD(vDSP_Length(log2(Float(sineArraySize))), FFTRadix(kFFTRadix2))

/*Take and returns the Fast Fourier Transform for a given vector. The values in the vector must be spaced evenly, as defined by FFT.*/
func fft(var inputArray:[Double]) -> [Double] {
    var fftMagnitudes = [Double](count:inputArray.count, repeatedValue:0.0)
    var zeroArray = [Double](count:inputArray.count, repeatedValue:0.0)
    var splitComplexInput = DSPDoubleSplitComplex(realp: &inputArray, imagp: &zeroArray)
    
    vDSP_fft_zipD(fft_weights, &splitComplexInput, 1, vDSP_Length(log2(CDouble(inputArray.count))), FFTDirection(FFT_FORWARD));
    vDSP_zvmagsD(&splitComplexInput, 1, &fftMagnitudes, 1, vDSP_Length(inputArray.count));
    
    let roots = sqrt(fftMagnitudes) // vDSP_zvmagsD returns squares of the FFT magnitudes, so take the root here
    var normalizedValues = [Double](count:inputArray.count, repeatedValue:0.0)
    
    vDSP_vsmulD(roots, vDSP_Stride(1), [2.0 / Double(inputArray.count)], &normalizedValues, vDSP_Stride(1), vDSP_Length(inputArray.count))
    return normalizedValues
}

/*-----------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------Test Sines-------------------------------------------------------*/

// Create two sine waves to test function
let frequency1 = 4.0
let phase1 = 0.0
let amplitude1 = 2.0

let sineWave = (0..<sineArraySize).map {
    amplitude1 * sin(2.0 * M_PI / Double(sineArraySize) * Double($0) * frequency1 + phase1)
}

let frequency2 = 1.0
let phase2 = M_PI / 2.0
let amplitude2 = 1.0

let sineWave2 = (0..<sineArraySize).map {
    amplitude2 * sin(2.0 * M_PI / Double(sineArraySize) * Double($0) * frequency2 + phase2)
}

// Test out vector addition function
let combinedSineWave = sineWave +++ sineWave2

// Plot sine waves
plotArrayInPlayground(sineWave, "Sine wave 1")
plotArrayInPlayground(sineWave, "Sine wave 2")
plotArrayInPlayground(combinedSineWave, "Combined wave")

/*-----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------FFT Row Acceleration Data------------------------------------------------*/

// Generate FFT
let fftRow = fft(rowAccelerationData)

// Clean out white noise in FFT (values that are too small to make an impact are removed, mainly the middle of the graph)
var fftRowCleaned : [Double] = []
for point in fftRow
{
    if point > 0.02
    {
        fftRowCleaned.append(point)
    }
    else
    {
        fftRowCleaned.append(0)
    }
}


// THE FOLLOWING VALUES WERE GENERATED BY MATLAB'S IFFT FUNCTION. THIS IS PROBABLY THE SOURCE OF ERROR IN MY PROJECT. The third graph should technically be the one least prone to error.

let rowCleaned1 = [0.0075, 0.0366, 0.0147, -0.0491, -0.0016, -0.0212, -0.0212, 0.0034, 0.0151, 0.0064, 0.0032, 0.0118, -0.0201, 0.002, -0.0037, -0.0246, -0.0066, 0.0113, 0.0079, -0.0122, 0.0099, 3.0E-4, -0.0025, 0.0235, 0.0069, 0.0099, 0.0069, 0.0036, 0.003, -0.0179, 0.0117, -0.0165, -0.0241, 0.0053, 0.008, -0.0195, 0.0173, 0.0082, 0.0113, 0.0072, 0.0075, 0.0013, 0.0334, -0.0133, 0.0245, 0.0168, 0.0157, -0.0212, -0.0019, -0.0173, -0.025, -0.0174, -0.0102, -0.0076, -0.0085, 0.0641, 0.0171, -0.0024, -0.0212, -0.0086, -0.006, 0.0236, 0.0164, 0.0106, -0.0022, 0.0065, -0.015, -0.0078, -0.0424, -0.0077, -0.0204, 0.0062, 0.0015, -0.009, -0.0033, 0.0087, -0.0206, 0.0113, 0.0341, -0.0129, -0.0198, 0.0076, 0.0223, -0.0088, -0.0303, -0.0029, 0.0115, -0.0281, 0.0099, -0.0017, 0.007, -0.0103, -0.0059, -0.0527, 0.0052, 0.0114, 0.0064, 0.0269, 0.0143, 0.0497, -0.0364, 0.0254, -0.0065, -0.0153, 0.0084, -0.0299, 0.0048, 0.0109, -0.0302, 0.019, 0.032, 0.0162, -0.0157, 0.0483, -0.0018, 0.0619, -0.04, -0.0636, 0.0113, -0.0147, 0.004, 0.048, 0.0034, 0.0563, -0.0306, 0.0291, 0.0084, -0.0106, -0.0159, 0.0328, 0.0012, -0.0081, 0.0201, -0.0626, -0.0556, 0.0209, 0.0251, 0.0342, -0.0116, -0.0242, -0.0178, 0.0588, -0.0305, -0.0106, 0.0203, 0.0147, -0.0887, -0.0272, -0.0517, 0.035, 0.0682, -0.0552, -0.0205, -0.0603, 0.0229, -0.0559, -0.0159, -0.0246, -0.0595, -0.038, 0.0367, -0.0244, -0.0233, -0.0307, -0.0215, 0.0179, -0.058, 0.035, 0.0329, -0.0065, 0.0444, 0.0552, 0.0444, -0.0065, 0.0329, 0.035, -0.058, 0.0179, -0.0215, -0.0307, -0.0233, -0.0244, 0.0367, -0.038, -0.0595, -0.0246, -0.0159, -0.0559, 0.0229, -0.0603, -0.0205, -0.0552, 0.0682, 0.035, -0.0517, -0.0272, -0.0887, 0.0147, 0.0203, -0.0106, -0.0305, 0.0588, -0.0178, -0.0242, -0.0116, 0.0342, 0.0251, 0.0209, -0.0556, -0.0626, 0.0201, -0.0081, 0.0012, 0.0328, -0.0159, -0.0106, 0.0084, 0.0291, -0.0306, 0.0563, 0.0034, 0.048, 0.004, -0.0147, 0.0113, -0.0636, -0.04, 0.0619, -0.0018, 0.0483, -0.0157, 0.0162, 0.032, 0.019, -0.0302, 0.0109, 0.0048, -0.0299, 0.0084, -0.0153, -0.0065, 0.0254, -0.0364, 0.0497, 0.0143, 0.0269, 0.0064, 0.0114, 0.0052, -0.0527, -0.0059, -0.0103, 0.007, -0.0017, 0.0099, -0.0281, 0.0115, -0.0029, -0.0303, -0.0088, 0.0223, 0.0076, -0.0198, -0.0129, 0.0341, 0.0113, -0.0206, 0.0087, -0.0033, -0.009, 0.0015, 0.0062, -0.0204, -0.0077, -0.0424, -0.0078, -0.015, 0.0065, -0.0022, 0.0106, 0.0164, 0.0236, -0.006, -0.0086, -0.0212, -0.0024, 0.0171, 0.0641, -0.0085, -0.0076, -0.0102, -0.0174, -0.025, -0.0173, -0.0019, -0.0212, 0.0157, 0.0168, 0.0245, -0.0133, 0.0334, 0.0013, 0.0075, 0.0072, 0.0113, 0.0082, 0.0173, -0.0195, 0.008, 0.0053, -0.0241, -0.0165, 0.0117, -0.0179, 0.003, 0.0036, 0.0069, 0.0099, 0.0069, 0.0235, -0.0025, 3.0E-4, 0.0099, -0.0122, 0.0079, 0.0113, -0.0066, -0.0246, -0.0037, 0.002, -0.0201, 0.0118, 0.0032, 0.0064, 0.0151, 0.0034, -0.0212, -0.0212, -0.0016, -0.0491, 0.0147, 0.0366, 0.0075]

// Cleaned out outlying point for better graph. This is arguably the better reconsturction.
let rowCleaned2 = [/*-1.2278,*/ -0.6842, -0.573, -0.5047, -0.4792, -0.4503, -0.3396, -0.286, -0.1002, -0.047, -0.1419, -0.0677, 0.0934, 0.1585, 0.1839, 0.2116, 0.3355, 0.39, 0.4205, 0.5157, 0.4886, 0.4934, 0.4696, 0.4798, 0.5445, 0.4571, 0.4067, 0.3917, 0.2883, 0.3316, 0.2227, 0.1614, 0.0076, 0.0721, 0.1683, 0.1215, 0.0272, 0.0181, -0.1393, -0.0586, -0.0267, -0.1636, -0.2041, -0.3225, -0.3054, -0.3041, -0.3142, -0.3634, -0.4236, -0.541, -0.4201, -0.4127, -0.4942, -0.3317, -0.1781, -0.1264, -0.0563, 0.0318, 0.139, 0.2778, 0.3042, 0.3219, 0.4531, 0.5276, 0.5634, 0.4094, 0.3607, 0.3, 0.2189, 0.1195, 0.0835, 0.0588, -0.0223, -0.0111, -0.115, -0.0809, 0.015, -0.1558, -0.1852, -0.1601, -0.2974, -0.3653, -0.3389, -0.3422, -0.3353, -0.2829, -0.2767, -0.3306, -0.3014, -0.1472, -0.189, -0.2329, -0.1522, -0.1617, -0.1496, -0.0577, -0.0406, -0.0293, 0.1044, 0.195, 0.1498, 0.0781, 0.1607, 0.0939, 0.1511, 0.2111, 0.1306, 0.099, 0.4179, 0.3501, 0.3119, 0.4811, 0.5148, 0.4979, 0.5724, 0.6016, 0.6234, 0.2144, 0.2355, 0.1944, 0.1459, 0.158, 0.1222, -0.0075, 0.0293, -0.0609, -0.0825, -0.236, -0.1859, -0.154, -0.073, -0.0559, -0.2129, -0.2327, -0.3308, -0.3976, -0.1703, -0.1646, -0.19, -0.5234, -0.4819, -0.4823, -0.3852, -0.3737, -0.3025, -0.3934, -0.4116, -0.3471, -0.1884, -0.1971, -0.1391, -0.0426, -0.014, 0.0027, -0.0988, -0.204, -0.1739, -0.1323, -0.1286, -0.1607, -0.0162, -0.0251, -0.0108, 0.1869, 0.2244, 0.4659, 0.5107, 0.4792, 0.7153, 0.7473, 0.7176, 0.6731, 0.6975, 0.7444, 0.5248, 0.4224, 0.4457, 0.2096, 0.1739, 0.1805, 0.1618, 0.1933, 0.2577, 0.2457, -0.1479, -0.1043, -0.1704, -0.3293, -0.3302, -0.2255, -0.6189, -0.6975, -0.6983, -0.3106, -0.4054, -0.6843, -0.6489, -0.6572, -0.3236, -0.3141, -0.3914, -0.3051, -0.1013, -0.0993, -0.0613, -0.02, -0.0125, -0.0185, -0.1163, -0.1331, -0.1283, 0.009, -0.0332, -0.0118, 0.1259, 0.1547, 0.2173, 0.4902, 0.5521, 0.519, 0.5663, 0.6024, 0.5479, 0.4255, 0.3577, 0.3207, 0.0228, -0.0473, -0.0982, -0.2068, -0.2258, -0.2205, -0.28, -0.2258, -0.2502, -0.4136, -0.4094, -0.3349, -0.3212, -0.2682, -0.2854, -0.196, -0.1567, -0.0491, -0.0722, -0.0814, 0.0251, 0.0944, 0.1209, 0.1487, 0.1702, 0.2751, 0.2548, 0.3895, 0.4172, 0.4585, 0.4196, 0.3995, 0.3195, 0.264, 0.2248, 0.1793, 0.137, 0.2076, 0.0617, 0.0419, 0.0338, 0.0235, 0.0171, 0.0783, 0.0888, 0.0878, 0.0495, -0.0104, -0.0705, -0.1307, -0.1867, -0.2146, -0.2525, -0.314, -0.425, -0.5523, -0.4892, -0.403, -0.5656, -0.3794, -0.3208, -0.4011, -0.2973, -0.2757, -0.1699, -0.2389, -0.1997, -0.2055, -0.1914, -0.0943, -0.0447, -0.0704, 0.0108, 0.136, 0.2834, 0.2389, 0.2215, 0.242, 0.1813, 0.2589, 0.3563, 0.3111, 0.3322, 0.2014, 0.3245, 0.4345, 0.4383, 0.3651, 0.3141, 0.3319, 0.3699, 0.3705, 0.3038, 0.2213, 0.2055, 0.2692, 0.2449, 0.2441, 0.1463, 0.1535, 0.1425, 0.1404, 0.2332, 0.1064, 0.0054, -0.1875, -0.035, -0.0795, -0.1033, -0.1344, -0.3582, -0.3191, -0.4012, -0.4012, -0.4354, -0.4911, -0.5457, -0.7658]

// At least it's pretty?
let rowCleaned3 = [0.0091, 0.0033, 1.0E-4, 0.0056, 0.0055, -1.0E-4, 6.0E-4, 0.0051, 0.0025, -0.0019, 0.0011, 0.0029, -0.001, -0.0019, 0.001, 0.002, -0.0015, -0.002, 0.0012, 4.0E-4, -0.0027, -0.0016, 9.0E-4, -7.0E-4, -0.0033, -0.0012, 3.0E-4, -0.0024, -0.0029, -6.0E-4, -1.0E-4, -0.0027, -0.0029, -3.0E-4, -9.0E-4, -0.0038, -0.0023, 0.0, -0.0018, -0.0036, -0.0013, 1.0E-4, -0.0025, -0.0026, 1.0E-4, -1.0E-4, -0.0023, -0.0011, 7.0E-4, -3.0E-4, -0.0018, -3.0E-4, 9.0E-4, -4.0E-4, -0.0017, 0.0, 0.0013, -8.0E-4, -0.001, 0.0017, 0.0016, -6.0E-4, 7.0E-4, 0.0022, 0.0011, -5.0E-4, 0.0017, 0.003, 6.0E-4, 4.0E-4, 0.0028, 0.0018, 0.0, 7.0E-4, 0.0021, 0.0016, -1.0E-4, 0.0014, 0.0018, -0.0, -1.0E-4, 9.0E-4, 9.0E-4, 1.0E-4, -0.0, 0.0012, 6.0E-4, -4.0E-4, 0.0, 9.0E-4, 0.0011, -3.0E-4, 2.0E-4, 0.0014, -1.0E-4, -0.001, 3.0E-4, 5.0E-4, -5.0E-4, -9.0E-4, 5.0E-4, -1.0E-4, -0.0019, -8.0E-4, 1.0E-4, -7.0E-4, -0.0013, -5.0E-4, 2.0E-4, -7.0E-4, -0.0017, -4.0E-4, -1.0E-4, -0.0013, -0.0017, -2.0E-4, -6.0E-4, -0.002, -0.0011, -0.0, -9.0E-4, -0.0021, -7.0E-4, 1.0E-4, -0.0015, -0.0017, 4.0E-4, 1.0E-4, -0.001, -9.0E-4, 4.0E-4, -1.0E-4, -0.0013, -3.0E-4, 9.0E-4, -2.0E-4, -9.0E-4, 8.0E-4, 0.0012, -4.0E-4, -3.0E-4, 0.0019, 0.0013, -2.0E-4, 0.001, 0.0025, 8.0E-4, 3.0E-4, 0.0021, 0.0017, 0.0, 7.0E-4, 0.0018, 2.0E-4, -4.0E-4, 7.0E-4, 7.0E-4, -5.0E-4, -2.0E-4, 3.0E-4, 3.0E-4, -5.0E-4, -2.0E-4, 1.0E-4, -5.0E-4, -4.0E-4, -0.0, 0.0, -2.0E-4, -4.0E-4, -0.0, -2.0E-4, -0.0013, -2.0E-4, -0.0, -4.0E-4, -2.0E-4, 0.0, -0.0, -4.0E-4, -5.0E-4, 1.0E-4, -2.0E-4, -5.0E-4, 3.0E-4, 3.0E-4, -2.0E-4, -5.0E-4, 7.0E-4, 7.0E-4, -4.0E-4, 2.0E-4, 0.0018, 7.0E-4, 0.0, 0.0017, 0.0021, 3.0E-4, 8.0E-4, 0.0025, 0.001, -2.0E-4, 0.0013, 0.0019, -3.0E-4, -4.0E-4, 0.0012, 8.0E-4, -9.0E-4, -2.0E-4, 9.0E-4, -3.0E-4, -0.0013, -1.0E-4, 4.0E-4, -9.0E-4, -0.001, 1.0E-4, 4.0E-4, -0.0017, -0.0015, 1.0E-4, -7.0E-4, -0.0021, -9.0E-4, -0.0, -0.0011, -0.002, -6.0E-4, -2.0E-4, -0.0017, -0.0013, -1.0E-4, -4.0E-4, -0.0017, -7.0E-4, 2.0E-4, -5.0E-4, -0.0013, -7.0E-4, 1.0E-4, -8.0E-4, -0.0019, -1.0E-4, 5.0E-4, -9.0E-4, -5.0E-4, 5.0E-4, 3.0E-4, -0.001, -1.0E-4, 0.0014, 2.0E-4, -3.0E-4, 0.0011, 9.0E-4, 0.0, -4.0E-4, 6.0E-4, 0.0012, -0.0, 1.0E-4, 9.0E-4, 9.0E-4, -1.0E-4, -0.0, 0.0018, 0.0014, -1.0E-4, 0.0016, 0.0021, 7.0E-4, 0.0, 0.0018, 0.0028, 4.0E-4, 6.0E-4, 0.003, 0.0017, -5.0E-4, 0.0011, 0.0022, 7.0E-4, -6.0E-4, 0.0016, 0.0017, -0.001, -8.0E-4, 0.0013, 0.0, -0.0017, -4.0E-4, 9.0E-4, -3.0E-4, -0.0018, -3.0E-4, 7.0E-4, -0.0011, -0.0023, -1.0E-4, 1.0E-4, -0.0026, -0.0025, 1.0E-4, -0.0013, -0.0036, -0.0018, 0.0, -0.0023, -0.0038, -9.0E-4, -3.0E-4, -0.0029, -0.0027, -1.0E-4, -6.0E-4, -0.0029, -0.0024, 3.0E-4, -0.0012, -0.0033, -7.0E-4, 9.0E-4, -0.0016, -0.0027, 4.0E-4, 0.0012, -0.002, -0.0015, 0.002, 0.001, -0.0019, -0.001, 0.0029, 0.0011, -0.0019, 0.0025, 0.0051, 6.0E-4, -1.0E-4, 0.0055, 0.0056, 1.0E-4, 0.0033]

// Plot graphs of each step of the process in logical order
plotArrayInPlayground(rowAccelerationData, "Row Acceleration w/ Noise")
plotArrayInPlayground(fftRow, "FFT Row w/ Noise")
plotArrayInPlayground(fftRowCleaned, "FFT Row, Clean")
plotArrayInPlayground(rowCleaned1, "Row Acceleration, Clean, 1st attempt")
plotArrayInPlayground(rowCleaned2, "Row Acceleration, Clean, 2nd attempt")
plotArrayInPlayground(rowCleaned3, "Row Acceleration, Clean, 3rd attempt")
plotArrayInPlayground(rowAccelerationData, "Row Acceleration w/ Noise") // Plot again for easy reference

/*-----------------------------------------------------------------------------------------------------------------------*/



